	-- MySQL Script generated by MySQL Workbench
	-- Wed Aug  9 12:23:28 2023
	-- Model: New Model    Version: 1.0
	-- MySQL Workbench Forward Engineering

	SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
	SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
	SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

	-- -----------------------------------------------------
	-- Schema WeeGigDB
	-- -----------------------------------------------------

	-- -----------------------------------------------------
	-- Schema WeeGigDB
	-- -----------------------------------------------------
	CREATE SCHEMA IF NOT EXISTS `WeeGigDB` DEFAULT CHARACTER SET utf8 ;
	USE `WeeGigDB` ;

	-- -----------------------------------------------------
	-- Table `WeeGigDB`.`LOGIN`
	-- -----------------------------------------------------
	DROP TABLE IF EXISTS `WeeGigDB`.`LOGIN` ;

	CREATE TABLE IF NOT EXISTS `WeeGigDB`.`LOGIN` (
	  `email` VARCHAR(45) NOT NULL,
	  `password` VARCHAR(32) NOT NULL,
	  PRIMARY KEY (`email`))
	ENGINE = InnoDB;


	-- -----------------------------------------------------
	-- Table `WeeGigDB`.`USERS`
	-- -----------------------------------------------------
	DROP TABLE IF EXISTS `WeeGigDB`.`USERS` ;

	CREATE TABLE IF NOT EXISTS `WeeGigDB`.`USERS` (
	  `idUSER` INT NOT NULL AUTO_INCREMENT,
	  `username` VARCHAR(16) NOT NULL,
	  `email` VARCHAR(45) NOT NULL,
	  `name` VARCHAR(45) NOT NULL,
	  `surname` VARCHAR(45) NOT NULL,
	  `docType` INT NOT NULL,
	  `document` VARCHAR(9) NOT NULL,
	  `phoneNumber` VARCHAR(12) NOT NULL,
	  `birthdate` DATE NOT NULL,
	  `userType` ENUM('Employee', 'Employer') NOT NULL,
	  `companyName` VARCHAR(45) NULL,
	  `companyNIF` VARCHAR(9) NULL,
	  `address` VARCHAR(45) NULL,
	  `companyPhoneNumber` VARCHAR(12) NULL,
	  `website` VARCHAR(45) NULL,
	  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
	  PRIMARY KEY (`idUSER`),
	  UNIQUE INDEX `idUSER_UNIQUE` (`idUSER` ASC) VISIBLE,
	  INDEX `emailLogin` (`email` ASC) VISIBLE,
	  CONSTRAINT `emailLogin`
		FOREIGN KEY (`email`)
		REFERENCES `WeeGigDB`.`LOGIN` (`email`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;


	-- -----------------------------------------------------
	-- Table `WeeGigDB`.`JOB_OFFERS`
	-- -----------------------------------------------------
	DROP TABLE IF EXISTS `WeeGigDB`.`JOB_OFFERS` ;

	CREATE TABLE IF NOT EXISTS `WeeGigDB`.`JOB_OFFERS` (
	  `idJOB_OFFERS` INT NOT NULL AUTO_INCREMENT,
	  `title` VARCHAR(45) NULL,
	  `description` VARCHAR(45) NULL,
	  `typeOfPayment` VARCHAR(45) NULL,
	  `payment` VARCHAR(45) NULL,
	  `ubicacion` VARCHAR(45) NULL,
	  `schedule` DATETIME NULL,
	  `category` VARCHAR(45) NULL,
	  `idEmployer` INT NULL,
	  `idEmployees` INT NULL,
	  PRIMARY KEY (`idJOB_OFFERS`),
	  INDEX `idEmployees` (`idEmployees` ASC) VISIBLE,
	  INDEX `idEmployer` (`idEmployer` ASC) VISIBLE,
	  CONSTRAINT `offerCreator`
		FOREIGN KEY (`idEmployer`)
		REFERENCES `WeeGigDB`.`USERS` (`idUSER`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;


	-- -----------------------------------------------------
	-- Table `WeeGigDB`.`JOB_APPLICATION`
	-- -----------------------------------------------------
	DROP TABLE IF EXISTS `WeeGigDB`.`JOB_APPLICATION` ;

	CREATE TABLE IF NOT EXISTS `WeeGigDB`.`JOB_APPLICATION` (
	  `idUSER` INT NOT NULL,
	  `idJOB_OFFERS` INT NOT NULL,
	  `applicationDate` VARCHAR(45) NULL,
	  `applicationStatus` VARCHAR(45) NULL,
	  PRIMARY KEY (`idUSER`, `idJOB_OFFERS`),
	  INDEX `employer_idx` (`idJOB_OFFERS` ASC) VISIBLE,
	  CONSTRAINT `employer`
		FOREIGN KEY (`idJOB_OFFERS`)
		REFERENCES `WeeGigDB`.`JOB_OFFERS` (`idJOB_OFFERS`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `username`
		FOREIGN KEY (`idUSER`)
		REFERENCES `WeeGigDB`.`USERS` (`idUSER`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;


	-- -----------------------------------------------------
	-- Table `WeeGigDB`.`REVIEWS`
	-- -----------------------------------------------------
	DROP TABLE IF EXISTS `WeeGigDB`.`REVIEWS` ;

	CREATE TABLE IF NOT EXISTS `WeeGigDB`.`REVIEWS` (
	  `idREVIEWS` INT NOT NULL AUTO_INCREMENT,
	  `reviewTitle` VARCHAR(45) NULL,
	  `reviewContent` VARCHAR(256) NULL,
	  `rating` INT NULL,
	  `idReviewer` INT NOT NULL,
	  `idReviewed` INT NOT NULL,
	  PRIMARY KEY (`idREVIEWS`),
	  INDEX `idReviewer_idx` (`idReviewer` ASC) VISIBLE,
	  INDEX `idReviewed_idx` (`idReviewed` ASC) VISIBLE,
	  CONSTRAINT `idReviewer1`
		FOREIGN KEY (`idReviewer`)
		REFERENCES `WeeGigDB`.`USERS` (`idUSER`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `idReviewed`
		FOREIGN KEY (`idReviewed`)
		REFERENCES `WeeGigDB`.`USERS` (`idUSER`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;


	-- -----------------------------------------------------
	-- Table `WeeGigDB`.`REVIEW_DATE`
	-- -----------------------------------------------------
	DROP TABLE IF EXISTS `WeeGigDB`.`REVIEW_DATE` ;

	CREATE TABLE IF NOT EXISTS `WeeGigDB`.`REVIEW_DATE` (
	  `idReview` INT NOT NULL,
	  `idReviewer` INT NOT NULL,
	  `idJob` INT NOT NULL,
	  `reviewDate` DATE NULL,
	  `idReviewed` INT NOT NULL,
	  PRIMARY KEY (`idReview`, `idReviewer`, `idJob`),
	  INDEX `idReviewer_idx` (`idReviewer` ASC) VISIBLE,
	  INDEX `idJob_idx` (`idJob` ASC) VISIBLE,
	  CONSTRAINT `idReview`
		FOREIGN KEY (`idReview`)
		REFERENCES `WeeGigDB`.`REVIEWS` (`idREVIEWS`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `idReviewer`
		FOREIGN KEY (`idReviewer`)
		REFERENCES `WeeGigDB`.`USERS` (`idUSER`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `idJob`
		FOREIGN KEY (`idJob`)
		REFERENCES `WeeGigDB`.`JOB_OFFERS` (`idJOB_OFFERS`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;


	SET SQL_MODE=@OLD_SQL_MODE;
	SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
	SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

	-- Creación de usuarios y empleador
	INSERT INTO LOGIN (email, password) VALUES
	  ('employee1@example.com', 'employee1password'),
	  ('employee2@example.com', 'employee2password'),
	  ('employer1@example.com', 'employer1password');

	INSERT INTO USERS (username, email, name, surname, docType, document, phoneNumber, birthdate, userType, companyName, companyNIF, address, companyPhoneNumber, website)
	VALUES
	  ('employee1', 'employee1@example.com', 'Employee One', 'Last Name', 1, '12345678A', '1234567890', '1990-01-01', 'Employee', NULL, NULL, NULL, NULL, NULL),
	  ('employee2', 'employee2@example.com', 'Employee Two', 'Last Name', 1, '23456789B', '9876543210', '1995-05-15', 'Employee', NULL, NULL, NULL, NULL, NULL),
	  ('employer1', 'employer1@example.com', 'Employer One', 'Company', 2, '34567890C', '5555555555', '1985-08-20', 'Employer', 'My Company', '123456789', '123 Street', '555-555-5555', 'www.mycompany.com');

	-- Obtén el ID del employer1
	SELECT idUSER INTO @employerID FROM USERS WHERE username = 'employer1';

	-- Creación de ofertas de trabajo por employer1
	INSERT INTO JOB_OFFERS (title, description, typeOfPayment, payment, ubicacion, schedule, category, idEmployer)
	VALUES
	  ('Oferta 1', 'Descripción de la oferta 1', 'Tipo de pago 1', 'Pago 1', 'Ubicación 1', NOW(), 'Categoría 1', @employerID),
	  ('Oferta 2', 'Descripción de la oferta 2', 'Tipo de pago 2', 'Pago 2', 'Ubicación 2', NOW(), 'Categoría 2', @employerID),
	  ('Oferta 3', 'Descripción de la oferta 3', 'Tipo de pago 3', 'Pago 3', 'Ubicación 3', NOW(), 'Categoría 3', @employerID);


	-- Aplicación a ofertas de trabajo
	-- Obtén el ID de los empleados
	SELECT idUSER INTO @employeeID1 FROM USERS WHERE username = 'employee1';
	SELECT idUSER INTO @employeeID2 FROM USERS WHERE username = 'employee2';

	-- Insertar aplicaciones a ofertas
	INSERT INTO JOB_APPLICATION (idUSER, idJOB_OFFERS, applicationDate, applicationStatus)
	VALUES
	  (@employeeID1, 1, NOW(), 'Applied'),
	  (@employeeID2, 1, NOW(), 'Applied');

	-- Creación de revisiones
	-- Insertar revisiones
	INSERT INTO REVIEWS (reviewTitle, reviewContent, rating, idReviewer, idReviewed)
	VALUES
	  ('Buena Experiencia', 'Trabajé en una oferta con este empleador y fue una experiencia positiva.', 4, @employeeID1, @employerID),
	  ('Satisfactorio', 'Colaboré con este empleado en un proyecto y cumplió con las expectativas.', 5, @employerID, @employeeID1);
